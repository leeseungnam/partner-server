<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.wrightbrothers.apps.product.query.Product">
	
	<select id="isProductCode" parameterType="java.lang.String" resultType="boolean">
		select
		    if(count(product_code) = 0, false, true) as isProductCode
		  from product
		 where product_code = #{productCode}
	</select>
	
	<select id="isProductAuth" parameterType="kr.wrightbrothers.apps.product.dto.ProductAuthDto" resultType="boolean">
		select
			if(count(product_code) = 0, true, false) as isProductAuth
		  from product
		 where partner_code = #{partnerCode}
		   and product_code = #{productCode}
	</select>

	<select id="findProductCountByPartnerCode" parameterType="java.lang.String" resultType="Integer">
		select
			count(product_code) as productCount
		from product
		where partner_code = #{partnerCode}
	</select>

	<select id="findProductGroupCode" parameterType="java.lang.String" resultType="java.lang.String">
		select
		    prdt_grp_cd
		  from com_cagy
		 where cagy_cd = #{categoryCode}
	</select>

	<select id="findProductStatus" parameterType="java.lang.String" resultType="java.lang.String">
		select
		    product_status_code
		  from product_sell_info
		 where product_code = #{productCode}
	</select>

	<select id="findProductDisplayFlag" parameterType="java.lang.String" resultType="java.lang.String">
		select
		    display_flag
		  from product_sell_info
		 where product_code = #{productCode}
	</select>

	<select id="findProductList" parameterType="kr.wrightbrothers.apps.product.dto.ProductListDto$Param" resultType="kr.wrightbrothers.apps.product.dto.ProductListDto$Response">
		select
		    p.product_code,
		    p.brand_name,
		    p.category_one_name,
		    p.category_two_name,
		    p.category_thr_name,
		    p.product_name,
		    ps.product_status_code,
		    ps.product_status_code as product_status_name,
			ps.display_flag,
		    if(ps.display_flag = 'Y', '노출', '미노출') as display_name,
		    ps.product_stock_qty,
		    ps.final_sell_amount,
			ps.product_option_flag,
			p.create_date,
			p.update_date,
			p.create_user_id,
			u.user_name as create_user_name
		  from product p
		 inner join product_sell_info ps
			on p.product_code = ps.product_code
		  left join users u
			on p.create_user_id = u.user_id
		 where p.partner_code = #{partnerCode}
		<choose>
			<when test="rangeType == 'PRODUCT'.toString()">
		   and p.create_date between concat(#{startDay}, ' 00:00:00.0') and concat(#{endDay}, ' 23:59:59.9')
			</when>
			<when test="rangeType == 'SALE'.toString()">
		   and ps.product_sell_start_date between concat(#{startDay}, ' 00:00:00.0') and concat(#{endDay}, ' 23:59:59.9')
			</when>
		</choose>
		-- 전시상태
		<foreach collection="displayFlag" item="item" index="index" open="and ps.display_flag in (" separator="," close=")">
				#{item}
		</foreach>
		-- 상품상태
		<foreach collection="status" item="item" index="index" open="and ps.product_status_code in (" separator="," close=")">
				#{item}
		</foreach>
		-- 조회기간
		<if test="keywordValue != null and keywordValue != ''">
			<choose>
				<when test="keywordType == 'NAME'.toString()">
					<foreach collection="keywordValueList" item="item" index="index" open="and (" separator="OR" close=")">
						p.product_name like #{item} '%'
					</foreach>
				</when>
				<when test="keywordType == 'CODE'.toString()">
					<foreach collection="keywordValueList" item="item" index="index" open="and (" separator="OR" close=")">
						p.product_code like #{item} '%'
					</foreach>
				</when>
			</choose>
		</if>
		<choose>
			<when test="sortType == 'CRE'.toString()">
		order by p.create_date desc
			</when>
			<when test="sortType == 'UPD'.toString()">
		order by p.update_date desc
			</when>
			<when test="sortType == 'LSAMT'.toString()">
		order by ps.final_sell_amount
			</when>
			<when test="sortType == 'HSAMT'.toString()">
		order by ps.final_sell_amount desc
			</when>
		</choose>
	</select>

	<insert id="insertProduct" parameterType="kr.wrightbrothers.apps.product.dto.ProductDto$ReqBody">
		insert into product(product_code,
							partner_code,
							product_type,
							category_one_code,
							category_one_name,
							category_two_code,
							category_two_name,
							category_thr_code,
							category_thr_name,
							product_name,
							brand_no,
							brand_name,
							model_code,
							model_name,
							model_year,
							youtube_url,
							product_barcode,
							product_file_no,
							product_description,
							create_user_id,
							update_user_id)
		values(#{productCode},
			   #{partnerCode},
			   #{productType},
			   #{categoryOneCode},
			   #{categoryOneName},
			   #{categoryTwoCode},
			   #{categoryTwoName},
			   #{categoryThrCode},
			   #{categoryThrName},
			   #{productName},
			   #{brandNo},
			   #{brandName},
			   #{modelCode},
			   #{modelName},
			   #{modelYear},
			   #{youtubeUrl},
			   #{productBarcode},
			   #{productFileNo},
			   #{productDescription},
			   #{userId},
			   #{userId})
	</insert>

	<update id="updateProduct" parameterType="kr.wrightbrothers.apps.product.dto.ProductDto$ReqBody">
		update product
		   set category_one_code = #{categoryOneCode},
			   category_one_name = #{categoryOneName},
			   category_two_code = #{categoryTwoCode},
			   category_two_name = #{categoryTwoName},
			   category_thr_code = #{categoryThrCode},
			   category_thr_name = #{categoryThrName},
			   product_name = #{productName},
			   brand_no = #{brandNo},
			   brand_name = #{brandName},
			   model_code = #{modelCode},
			   model_name = #{modelName},
			   model_year = #{modelYear},
			   youtube_url = #{youtubeUrl},
			   product_barcode = #{productBarcode},
			   product_file_no = #{productFileNo},
			   product_description = #{productDescription},
			   update_user_id = #{userId},
			   update_date = now()
	     where product_code = #{productCode}
	</update>

	<insert id="mergeBasicSpec" parameterType="kr.wrightbrothers.apps.product.dto.BasicSpecDto$ReqBody">
		insert into product_basic_spec(product_code,
		                               sales_category_code,
		                               drivetrain_type_code,
		                               frame_material_code,
		                               frame_size_code,
		                               brake_type_code,
		                               purpose_theme_code,
		                               wheel_size_code,
		                               suspension_type_code,
		                               min_height_person,
		                               max_height_person,
		                               bike_weight,
		                               create_user_id,
		                               update_user_id)
		values(#{productCode},
			   #{salesCategoryCode},
			   #{drivetrainTypeCode},
			   #{frameMaterialCode},
			   #{frameSizeCode},
			   #{brakeTypeCode},
			   #{purposeThemeCode},
			   #{wheelSizeCode},
			   #{suspensionTypeCode},
			   #{minHeightPerson},
			   #{maxHeightPerson},
			   #{bikeWeight},
			   #{userId},
			   #{userId})
		on duplicate key
		update
			sales_category_code = #{salesCategoryCode},
			drivetrain_type_code = #{drivetrainTypeCode},
			frame_material_code = #{frameMaterialCode},
			frame_size_code = #{frameSizeCode},
			brake_type_code = #{brakeTypeCode},
			purpose_theme_code = #{purposeThemeCode},
			wheel_size_code = #{wheelSizeCode},
			suspension_type_code = #{suspensionTypeCode},
			min_height_person = #{minHeightPerson},
			max_height_person = #{maxHeightPerson},
			bike_weight = #{bikeWeight},
		    update_user_id = #{userId},
		    update_date = now()
	</insert>

	<insert id="insertBasicSpecAge" parameterType="kr.wrightbrothers.apps.product.dto.BasicSpecDto$ReqBody">
		insert into product_embark_age(product_code,
		                               embark_age,
		                               create_user_id)
		values
		<foreach collection="ageList" item="item" index="index" separator=",">
			(#{productCode}, #{item}, #{userId})
		</foreach>
	</insert>

	<delete id="deleteBasicSpecAge" parameterType="java.lang.String">
		delete
		  from product_embark_age
		 where product_code = #{productCode}
	</delete>

	<insert id="mergeSellInfo" parameterType="kr.wrightbrothers.apps.product.dto.SellInfoDto$ReqBody">
		insert into product_sell_info(product_code,
		                              product_amount,
		                              discount_flag,
		                              discount_type,
		                              discount_amount,
		                              supply_amount,
		                              final_sell_amount,
									  display_flag,
		                              product_option_flag,
									  product_status_code,
		                              product_stock_qty,
		                              create_user_id,
		                              update_user_id)
		values(#{productCode},
			   #{productAmount},
			   #{discountFlag},
			   #{discountType},
			   #{discountAmount},
		       #{supplyAmount},
			   #{finalSellAmount},
		       #{displayFlag},
		       #{productOptionFlag},
			   #{productStatusCode},
			   #{productStockQty},
			   #{userId},
			   #{userId})
		on duplicate key
		update
			product_amount		= #{productAmount},
			discount_flag		= #{discountFlag},
			discount_type		= #{discountType},
			discount_amount		= #{discountAmount},
		    supply_amount		= #{supplyAmount},
			final_sell_amount	= #{finalSellAmount},
			display_flag		= #{displayFlag},
		    product_option_flag	= #{productOptionFlag},
			product_status_code	= #{productStatusCode},
			product_stock_qty	= #{productStockQty},
		    update_user_id		= #{userId},
		    update_date			= now()
	</insert>
	
	<insert id="insertOption" parameterType="kr.wrightbrothers.apps.product.dto.OptionDto$ReqBody">
		insert into product_option(product_code,
		                           option_seq,
		                           option_name,
		                           option_value,
		                           option_surcharge,
		                           option_stock_qty,
		                           create_user_id,
		                           update_user_id)
		values(#{productCode},
			   #{optionSeq},
			   #{optionName},
			   #{optionValue},
			   #{optionSurcharge},
			   #{optionStockQty},
			   #{userId},
			   #{userId})
	</insert>

	<delete id="deleteOption" parameterType="java.lang.String">
		delete
		  from product_option
		 where product_code = #{productCode}
	</delete>

	<insert id="mergeDelivery" parameterType="kr.wrightbrothers.apps.product.dto.DeliveryDto$ReqBody">
		insert into product_delivery(product_code,
		                             delivery_type,
		                             delivery_bundle_flag,
		                             charge_type,
		                             charge_base,
		                             terms_free_charge,
		                             payment_type,
		                             surcharge_flag,
		                             area_code,
		                             surcharge_jejudo,
		                             surcharge_isolated,
		                             unstoring_zip_code,
		                             unstoring_address,
		                             unstoring_address_detail,
		                             return_zip_code,
		                             return_address,
		                             return_address_detail,
		                             exchange_charge,
		                             return_charge,
		                             return_delivery_company_code,
		                             create_user_id,
		                             update_user_id)
		values(#{productCode},
			   #{deliveryType},
		       #{deliveryBundleFlag},
			   #{chargeType},
			   #{chargeBase},
			   #{termsFreeCharge},
			   #{paymentType},
			   #{surchargeFlag},
			   #{areaCode},
			   #{surchargeJejudo},
			   #{surchargeIsolated},
			   #{unstoringZipCode},
		       #{unstoringAddress},
			   #{unstoringAddressDetail},
			   #{returnZipCode},
			   #{returnAddress},
			   #{returnAddressDetail},
		       #{exchangeCharge},
			   #{returnCharge},
			   #{returnDeliveryCompanyCode},
			   #{userId},
			   #{userId})
		on duplicate key
		update
			delivery_type					= #{deliveryType},
			delivery_bundle_flag			= #{deliveryBundleFlag},
			charge_type						= #{chargeType},
			charge_base						= #{chargeBase},
			terms_free_charge				= #{termsFreeCharge},
			payment_type					= #{paymentType},
			surcharge_flag					= #{surchargeFlag},
			area_code						= #{areaCode},
			surcharge_jejudo				= #{surchargeJejudo},
			surcharge_isolated				= #{surchargeIsolated},
			unstoring_zip_code				= #{unstoringZipCode},
			unstoring_address				= #{unstoringAddress},
			unstoring_address_detail		= #{unstoringAddressDetail},
			return_zip_code					= #{returnZipCode},
			return_address					= #{returnAddress},
			return_address_detail			= #{returnAddressDetail},
		    exchange_charge					= #{exchangeCharge},
			return_charge					= #{returnCharge},
			return_delivery_company_code	= #{returnDeliveryCompanyCode},
		    update_user_id					= #{userId},
		    update_date						= now()
	</insert>

	<insert id="mergeInfoNotice" parameterType="kr.wrightbrothers.apps.product.dto.InfoNoticeDto$ReqBody">
		insert into product_info_notice(product_code,
										category_code,
										model_name,
										product_size,
										product_weight,
										product_material,
										product_component,
										model_year,
										model_month,
										product_mfr,
										detail_spec,
										qa_standard,
										as_phone,
										create_user_id,
										update_user_id)
		values(#{productCode},
			   #{categoryCode},
			   #{modelName},
			   #{productSize},
			   #{productWeight},
			   #{productMaterial},
			   #{productComponent},
			   #{modelYear},
			   #{modelMonth},
			   #{productMfr},
			   #{detailSpec},
			   #{qaStandard},
			   #{asPhone},
			   #{userId},
			   #{userId})
		on duplicate key
		update
			category_code		= #{categoryCode},
			model_name			= #{modelName},
			product_size		= #{productSize},
			product_weight		= #{productWeight},
			product_material	= #{productMaterial},
			product_component	= #{productComponent},
			model_year			= #{modelYear},
			model_month			= #{modelMonth},
			product_mfr			= #{productMfr},
			detail_spec			= #{detailSpec},
			qa_standard			= #{qaStandard},
			as_phone			= #{asPhone},
		    update_user_id		= #{userId},
		    update_date			= now()
	</insert>

	<insert id="mergeGuide" parameterType="kr.wrightbrothers.apps.product.dto.GuideDto$ReqBody">
		insert into product_guide(product_code,
		                          product_guide,
		                          delivery_guide,
		                          exchange_return_guide,
		                          as_guide,
		                          qna_guide,
		                          create_user_id,
		                          update_user_id)
		values(#{productCode},
			   #{productGuide},
			   #{deliveryGuide},
			   #{exchangeReturnGuide},
			   #{asGuide},
		       #{qnaGuide},
			   #{userId},
			   #{userId})
		on duplicate key
		update
			product_guide			= #{productGuide},
			delivery_guide			= #{deliveryGuide},
			exchange_return_guide	= #{exchangeReturnGuide},
			as_guide				= #{asGuide},
			qna_guide				= #{qnaGuide},
		    update_user_id			= #{userId},
		    update_date				= now()
	</insert>

	<select id="findProduct" parameterType="java.lang.String" resultType="kr.wrightbrothers.apps.product.dto.ProductDto$ResBody">
		select
		    product_code,
			product_type,
			category_one_code,
			category_one_name,
            category_two_code,
            category_two_name,
            category_thr_code,
            category_thr_name,
            product_name,
            brand_no,
            brand_name,
            model_code,
            model_name,
            model_year,
            youtube_url,
            product_barcode,
            product_file_no,
            product_description
		  from product
		 where product_code = #{productCode}
	</select>

	<select id="findBasicSpec" parameterType="java.lang.String" resultMap="findBasicSpecMap">
		select
			bs.sales_category_code,
			bs.drivetrain_type_code,
			bs.frame_material_code,
            bs.frame_size_code,
            bs.brake_type_code,
            bs.purpose_theme_code,
            bs.wheel_size_code,
            bs.suspension_type_code,
            bs.min_height_person,
            bs.max_height_person,
            bs.bike_weight,
            ea.embark_age
		  from product_basic_spec bs
		  left join product_embark_age ea
			on bs.product_code = ea.product_code
		 where bs.product_code = #{productCode}
	</select>
	
	<resultMap id="findBasicSpecMap" type="kr.wrightbrothers.apps.product.dto.BasicSpecDto$ResBody">
		<result column="sales_category_code" property="salesCategoryCode"/>
		<result column="drivetrain_type_code" property="drivetrainTypeCode"/>
		<result column="frame_material_code" property="frameMaterialCode"/>
		<result column="frame_size_code" property="frameSizeCode"/>
		<result column="brake_type_code" property="brakeTypeCode"/>
		<result column="purpose_theme_code" property="purposeThemeCode"/>
		<result column="wheel_size_code" property="wheelSizeCode"/>
		<result column="suspension_type_code" property="suspensionTypeCode"/>
		<result column="min_height_person" property="minHeightPerson"/>
		<result column="max_height_person" property="maxHeightPerson"/>
		<result column="bike_weight" property="bikeWeight"/>
		<collection property="ageList" ofType="java.lang.String">
			<result column="embark_age"/>
		</collection>
	</resultMap>

	<select id="findSellInfo" parameterType="java.lang.String" resultType="kr.wrightbrothers.apps.product.dto.SellInfoDto$ResBody">
		select
			product_amount,
			discount_flag,
			discount_type,
            discount_amount,
            display_flag,
            product_option_flag,
            supply_amount,
            final_sell_amount,
            product_status_code,
            product_stock_qty
		  from product_sell_info
		 where product_code = #{productCode}
	</select>

	<select id="findOptionList" parameterType="java.lang.String" resultType="kr.wrightbrothers.apps.product.dto.OptionDto$ResBody">
		select
			option_seq,
			option_name,
			option_value,
            option_surcharge,
            option_stock_qty
		  from product_option
		 where product_code = #{productCode}
	</select>

	<select id="findDelivery" parameterType="java.lang.String" resultType="kr.wrightbrothers.apps.product.dto.DeliveryDto$ResBody">
		select
			delivery_type,
            delivery_bundle_flag,
            charge_type,
            charge_base,
            terms_free_charge,
            payment_type,
            surcharge_flag,
            area_code,
            surcharge_jejudo,
            surcharge_isolated,
            unstoring_zip_code,
            unstoring_address,
            unstoring_address_detail,
            return_zip_code,
            return_address,
            return_address_detail,
            exchange_charge,
            return_charge,
            return_delivery_company_code
		  from product_delivery
		 where product_code = #{productCode}
	</select>

	<select id="findInfoNotice" parameterType="java.lang.String" resultType="kr.wrightbrothers.apps.product.dto.InfoNoticeDto$ResBody">
		select
			category_code,
			model_name,
			product_size,
            product_weight,
            product_material,
            product_component,
            model_year,
            model_month,
            product_mfr,
            detail_spec,
            qa_standard,
            as_phone
		  from product_info_notice
		 where product_code = #{productCode}
	</select>

	<select id="findGuide" parameterType="java.lang.String" resultType="kr.wrightbrothers.apps.product.dto.GuideDto$ResBody">
		select
			product_guide,
			delivery_guide,
			exchange_return_guide,
            as_guide,
            qna_guide
		  from product_guide
		 where product_code = #{productCode}
	</select>

	<update id="bulkUpdateProductDisplay" parameterType="kr.wrightbrothers.apps.product.dto.StatusUpdateDto">
		<if test="productCodeList.length != 0">
		update product_sell_info
		   set display_flag	  = #{statusValue},
		       update_user_id = #{userId},
		       update_date	  = now()
		 where 1 = 1
			<foreach collection="productCodeList" item="item" index="index" open="and product_code in (" separator="," close=")">
				#{item}
			</foreach>
		</if>
	</update>

	<update id="bulkUpdateProductStatus" parameterType="kr.wrightbrothers.apps.product.dto.StatusUpdateDto">
		<if test="productCodeList.length != 0">
		update product_sell_info
		   set product_status_code = #{statusValue},
		       update_user_id	   = #{userId},
		       update_date		   = now()
		 where 1 = 1
			<foreach collection="productCodeList" item="item" index="index" open="and product_code in (" separator="," close=")">
				#{item}
			</foreach>
		</if>
	</update>

</mapper>
